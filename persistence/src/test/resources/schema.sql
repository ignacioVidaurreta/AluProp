CREATE TABLE IF NOT EXISTS countries (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(75)
);

CREATE TABLE IF NOT EXISTS provinces (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(75),
    countryId INTEGER REFERENCES countries(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS cities (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(75),
    countryId INTEGER REFERENCES countries(id) ON DELETE SET NULL,
    provinceId INTEGER REFERENCES countries(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS neighbourhoods (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(75),
    cityId INTEGER REFERENCES cities(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS universities (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(75)
);

CREATE TABLE IF NOT EXISTS careers (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(75)
);

CREATE TABLE IF NOT EXISTS users (
    id INTEGER IDENTITY PRIMARY KEY,
    email varchar(250),
    username varchar(250),
    passwordHash varchar(300),
    name varchar(50),
    lastName varchar(100),
    birthDate date,
    gender varchar(50),
    bio varchar(1000),
    contactNumber varchar(25),
    universityId INTEGER REFERENCES universities(id),
    careerId INTEGER REFERENCES careers(id),
    role VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS properties (
    id INTEGER IDENTITY PRIMARY KEY,
    description varchar(3000),
    caption varchar(250),
    image varchar(300),
    propertyType varchar(100),
    neighbourhoodId integer references neighbourhoods(id) ON DELETE SET NULL,
    privacyLevel boolean,
    capacity integer,
    price float,
    mainimageid integer, --THIS SHOULD BE A FOREIGN KEY! BUT THE ADD COLUMN IF NOT EXISTS WASN'T WORKING TODO FIX
    ownerId INTEGER REFERENCES  users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS interests (
    id INTEGER IDENTITY PRIMARY KEY,
    propertyId INTEGER REFERENCES properties(id),
    userId INTEGER REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS rules (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(250)
);

CREATE TABLE IF NOT EXISTS propertyRules (
    id INTEGER IDENTITY PRIMARY KEY,
    propertyId INTEGER REFERENCES properties(id),
    ruleId INTEGER REFERENCES rules(id)
);

CREATE TABLE IF NOT EXISTS services (
    id INTEGER IDENTITY PRIMARY KEY,
    name varchar(100)
);

CREATE TABLE IF NOT EXISTS propertyServices (
    id INTEGER IDENTITY PRIMARY KEY,
    propertyId INTEGER REFERENCES properties(id) ON DELETE CASCADE,
    serviceId INTEGER REFERENCES services(id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS images (
    id INTEGER IDENTITY PRIMARY KEY,
    propertyId INTEGER REFERENCES properties(id) ON DELETE CASCADE,
    image blob
);


-- Populating test database to check access

INSERT INTO countries(
    id, name)
SELECT * FROM (VALUES (1, 'Argentina'))
WHERE NOT EXISTS (SELECT * FROM countries WHERE id=1);

INSERT INTO cities(
    id, name, countryid, provinceid)
SELECT * FROM (VALUES (1, 'CABA', 1, null))
WHERE NOT EXISTS (SELECT * FROM cities WHERE id=1);

INSERT INTO neighbourhoods(
    id, name, cityid)
SELECT * FROM (VALUES (1, 'Palermo', 1))
WHERE NOT EXISTS (SELECT * FROM neighbourhoods WHERE id=1);

INSERT INTO universities(id, name)
SELECT * FROM (VALUES(1, 'ITBA'))
WHERE NOT EXISTS (SELECT * FROM universities WHERE id=1);

INSERT INTO careers(id, name)
SELECT * FROM (VALUES(1, 'Ingenieria en Testing'))
WHERE NOT EXISTS (SELECT * FROM careers WHERE id=1);

INSERT INTO users (
    id, email, username, passwordhash, name, lastname, birthdate, gender, bio, contactnumber, universityid, careerid, role)
SELECT * FROM (VALUES (1, 'johnTester@gmail.com', 'John_Tester', 'HDSASDKF', 'John', 'Tester', DATE '1996-07-12', 'MALE', 'RE capo', 1167567280, 1, 1, 'ROLE_GUEST'))
WHERE NOT EXISTS (SELECT * FROM users WHERE id=1);

INSERT INTO images(
    id, propertyid, image)
SELECT * FROM (VALUES (1, null, decode('', 'base64', '')))
WHERE NOT EXISTS (SELECT * FROM images WHERE id=1);


INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (1, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1, 1))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=1);

INSERT INTO images(
    id, propertyid, image)
SELECT * FROM (VALUES (2, 1, decode('', 'base64', '')))
WHERE NOT EXISTS (SELECT * FROM images WHERE id=2);

INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (2, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1, 1))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=2);

INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (3, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1, 1))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=3);

INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (4, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1,1 ))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=4);

INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (5, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1, 1))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=5);

INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (6, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1,1 ))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=6);

INSERT INTO properties(
    id, description, caption, propertytype, neighbourhoodid, privacylevel, capacity, price, mainimageid, ownerId)
SELECT * FROM (VALUES (7, 'posta que el mejor depto', 'el mejor depto', 'APARTMENT', 1, true, 5, 100, 1, 1))
WHERE NOT EXISTS (SELECT * FROM properties WHERE id=7);

INSERT INTO interests(id, propertyid, userid)
SELECT * FROM (VALUES(1, 1, 1))
WHERE NOT EXISTS (SELECT * FROM interests WHERE id = 1);

INSERT INTO rules(id, name)
SELECT * FROM (VALUES(1, 'No fumar mientras se escriben tests'))
WHERE NOT EXISTS (SELECT * FROM rules WHERE id=1);

INSERT INTO propertyrules (id, propertyid, ruleid)
SELECT * FROM (VALUES(1, 1, 1))
WHERE NOT EXISTS (SELECT * FROM propertyrules WHERE id=1);


INSERT INTO services (id, name)
SELECT * FROM (VALUES(1, 'Iluminación'))
WHERE NOT EXISTS (SELECT * FROM services WHERE id=1);

INSERT INTO propertyServices (id, propertyId, serviceId)
SELECT * FROM (VALUES(1, 1, 1))
WHERE NOT EXISTS (SELECT * FROM propertyservices WHERE id = 1);

ALTER TABLE properties
ADD COLUMN IF NOT EXISTS is_available boolean NOT NULL DEFAULT true;